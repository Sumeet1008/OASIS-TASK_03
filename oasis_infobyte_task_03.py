# -*- coding: utf-8 -*-
"""Oasis Infobyte Task 03

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gNImE3oYq0XBZwJ0hXkkTgH84ffpMg7-

NAME : SUMEET BAFNA

OASIS INFOBYTE

DATA SCIENCE INTERNSHIP

TASK 03 : CAR PRICE PREDICTION
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

#loading the dataset
data=pd.read_csv("/content/car data.csv")
data

print(f'No of rows in the dataset:',data.shape[0])
print(f'No of columns in the dataset:',data.shape[1])

data.columns

#descriptive statistics
data.describe()

# Checking for null values
data.isnull()

data.isnull().sum()

null_values=data.isnull().sum().sum()
print(f'No of null values in the dataset:',null_values)

#dropping duplicate rows
data2=data.drop_duplicates()
data2

data2 = data2.copy()  # Ensure data2 is a copy, not a view

la = LabelEncoder()
data2['Fuel_Type'] = la.fit_transform(data2['Fuel_Type'])
data2['Selling_type'] = la.fit_transform(data2['Selling_type'])
data2['Transmission'] = la.fit_transform(data2['Transmission'])

data2

# Splitting features and target variable
X = data2.drop(['Car_Name', 'Selling_Price'], axis=1)
y = data2['Selling_Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Linear Regression model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Predict on test data
y_pred_lr = lr.predict(X_test)
pd.DataFrame(y_pred_lr)

# Evaluate Linear Regression model
mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)

print(f'Linear Regression MSE: {mse_lr}')
print(f'Linear Regression R2: {r2_lr}')

# Linear Regression
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred_lr, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2)
plt.title('Linear Regression')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.tight_layout()
plt.show()

# Train Random Forest Regressor model
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Predict on test data
y_pred_rf = rf.predict(X_test)
pd.DataFrame(y_pred_rf)

# Evaluate Random Forest model
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print(f'Random Forest MSE: {mse_rf}')
print(f'Random Forest R2: {r2_rf}')

# Random Forest
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_pred_rf, color='purple')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='green', linewidth=2)
plt.title('Random Forest')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.tight_layout()
plt.show()